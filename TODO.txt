# Descrição da ideia/princípio

servidor guarda/gere passwords em "vaults" cifrados
    # cada  "vault" regista metadados (url, username, observações, etc.) e a password de acesso ao serviço relacionado; ex.: {descricao: "Dropbox", url: https://dropbox.com, username: slopes; token|data: <password cifrada>}
    # o "token" ou "data" é o valor crifrado com chave simétrica (AES?) e codificado em base64, da password (ou de outros dados relevantes)
    # a chave simétrica para cifrar os dados é gerada aleatoriamente pelo servidor
    # depois de gerada e usada para cifrar os dados (token) a chave simétrica é cifrada com a chave pública do utilizador e também guardada no servidor
    # o servidor não consegue decrifar o token porque deixa de ter a chave, está cifrada com a publica do user e o servidor não tem a privada
    # o servidor precisa enviar ao utilizador (cliente) os dados cifrados (da chave simétrica) para que o cliente decifre com a privada e devolva ao servidor a chave decifrada
    # o servidor usa a chave decrifrada para decifrar o token e devolver o conteúdo decifrado ao utilizador

Funcionalidades:
* Register - Chaves Pub/priv
    Criado um par de chaves públicas e privadas RSA 4096 bits do lado do cliente.
    Chave Pública e privada fica do lado do cliente
    Chave pública fica do lado do servidor
    INPUT: email
    OUTPUT: Par de chaves pública/privada
* Login - Chaves Publica/privada
    Login é feito com a chave privada do utilizador (lado do cliente apenas) que é comparada com a chave pública do lado do servidor.
    INPUT: email + chave privada

* Criar Vault (Combinação de apenas 1 user:password:dominio)
* Partilhar Vault


Esrutura:
* DB - Sqlite
* Cifra - RSA (Diffie-Helman) + AES (stream)





Sitemap:
/app/index
/app/login
    public function actionLogout(): Response {
    public function actionProfile() {
    public function actionSettings() {
    public function actionDocumentation() {
    public function actionCopyright() {
    public function actionChangelog() {

    /vault/
      public function actionIndex(): string {
        public function actionCreate(): Response|string {
        public function actionUpdate(?int $id = null): Response|string {
        public function actionDelete(int $id) {
        public function actionRevokeAccess(int $vid, int $uid) {
        public function actionShare(int $vid, int $uid) {

NOMES EXEMPLO:
    SecurePassVault
    CryptoGuardian
    CipherKeySafe
    SafeLockVault
    EncrypTrust
    FortifyPass
    ShieldedKeyKeeper
    SafeCipherHub
    GuardedVault
    EncryptShield
    SecureKeyArmory
    CipherGuard Fortress
    VaultArmor
    PassDefender
    CryptoSecureKeeper
    SecureKeyCrypt
    GuardianPassLock
    EncryptedArmor
    CipherFortress
    PassSafeGuard
    VaultCrypt
    EncryptionVault
    PasswordlessGuard
    SecureVaultCipher
    CipherLockVault
    PasswordlessShield
    VaultGuardian
    EncryptionFortress
    CipherKeyVault
    PasswordlessArmor
    VaultDefender
    SecureEncryptionHub
    CipherShieldVault
    PasswordlessCryptKeeper
    VaultGuarded
    EncryptionArmory
    PasswordlessFortify
    SecureVaultCipher
    CipherDefender
    PasswordlessGuardianVault